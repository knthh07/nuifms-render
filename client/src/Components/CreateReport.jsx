import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';
import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';
import { TextField, Snackbar, Button, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import { Alert } from '@mui/material';
import { PDFDocument, rgb } from 'pdf-lib'; // Import PDF-lib
import SideNav from '../Components/sidenav/SideNav';

const CreateReport = () => {
    const [reportType, setReportType] = useState('day');
    const [specificTicket, setSpecificTicket] = useState('');
    const [status, setStatus] = useState('');
    const [startDate, setStartDate] = useState(null);
    const [endDate, setEndDate] = useState(null);
    const [userId, setUserId] = useState('');
    const [department, setDepartment] = useState('');
    const [building, setBuilding] = useState('');
    const [campus, setCampus] = useState('');
    const [jobOrders, setJobOrders] = useState([]);  // State for job orders
    const [noResults, setNoResults] = useState(false);
    const [userName, setUserName] = useState(''); // State for user's name

    // Fetch user profile to get the user's name
    useEffect(() => {
        const fetchUserProfile = async () => {
            try {
                const response = await axios.get('/api/profile', { withCredentials: true });
                const userData = response.data;
                setUserName(`${userData.firstName} ${userData.lastName}`); // Set user's name
            } catch (error) {
                console.error('Error fetching user profile:', error);
            }
        };
        fetchUserProfile();
    }, []);

    // Fetch job orders dynamically
    useEffect(() => {
        const fetchJobOrders = async () => {
            try {
                const response = await axios.get('/api/jobOrders', { params: { status: 'approved' }, withCredentials: true });
                setJobOrders(response.data.requests);  // Assuming response contains job orders in `requests`
            } catch (error) {
                console.error('Error fetching job orders:', error);
            }
        };

        fetchJobOrders();
    }, []);

    // Mark the function as async
    const handleGenerateReport = async () => {
        try {
            const dateRange = startDate && endDate
                ? `${startDate.toISODate()}:${endDate.toISODate()}`
                : '';

            const response = await axios.get('/api/report', {
                params: { reportType, specificTicket, status, dateRange, userId, department, building, campus }
            });
            const requests = response.data.requests;

            if (requests.length === 0) {
                setNoResults(true);
                return;
            }

            // Create a new PDF document
            const pdfDoc = await PDFDocument.create();
            const page = pdfDoc.addPage([600, 400]);

            // Add logo
            const logo = await import(/* webpackIgnore: true */ '../assets/img/nu_logo.png'); // Update the path to your logo
            const logoImage = await pdfDoc.embedPng(logo.default);
            const logoDims = logoImage.scale(0.5); // Scale the logo if necessary
            page.drawImage(logoImage, {
                x: 10,
                y: page.getHeight() - logoDims.height - 10,
                width: logoDims.width,
                height: logoDims.height,
            });

            // Report Title
            page.drawText('Job Order Report', {
                x: 70,
                y: page.getHeight() - 40,
                size: 24,
                color: rgb(0, 0, 0),
                font: await pdfDoc.embedFont('Helvetica-Bold'),
            });

            // User Information
            page.drawText(`Generated by: ${userName || 'N/A'}`, {
                x: 10,
                y: page.getHeight() - 70,
                size: 12,
                color: rgb(0, 0, 0),
            });
            page.drawText(`Generated on: ${new Date().toLocaleString()}`, {
                x: 10,
                y: page.getHeight() - 90,
                size: 12,
                color: rgb(0, 0, 0),
            });

            // Report details
            page.drawText(`Report Type: ${reportType}`, { x: 10, y: page.getHeight() - 110, size: 12, color: rgb(0, 0, 0) });
            page.drawText(`Status: ${status || 'All'}`, { x: 10, y: page.getHeight() - 130, size: 12, color: rgb(0, 0, 0) });
            page.drawText(`Date Range: ${dateRange || 'N/A'}`, { x: 10, y: page.getHeight() - 150, size: 12, color: rgb(0, 0, 0) });
            page.drawText(`User ID: ${userId || 'N/A'}`, { x: 10, y: page.getHeight() - 170, size: 12, color: rgb(0, 0, 0) });
            page.drawText(`Department: ${department || 'N/A'}`, { x: 10, y: page.getHeight() - 190, size: 12, color: rgb(0, 0, 0) });
            page.drawText(`Building: ${building || 'N/A'}`, { x: 10, y: page.getHeight() - 210, size: 12, color: rgb(0, 0, 0) });
            page.drawText(`Campus: ${campus || 'N/A'}`, { x: 10, y: page.getHeight() - 230, size: 12, color: rgb(0, 0, 0) });

            // Prepare data for the table
            const rows = requests.map(req => [
                req._id,
                `${req.firstName} ${req.lastName}`,
                req.status,
                new Date(req.createdAt).toLocaleDateString(),
            ]);

            // Draw table header
            const headerY = page.getHeight() - 260;
            const headers = ['ID', 'Name', 'Status', 'Date'];
            const font = await pdfDoc.embedFont('Helvetica-Bold'); // Embed the font once
            for (const [index, header] of headers.entries()) {
                page.drawText(header, {
                    x: 10 + index * 120,
                    y: headerY,
                    size: 12,
                    color: rgb(0, 0, 0),
                    font: font,
                });
            }

            // Draw table rows
            rows.forEach((row, rowIndex) => {
                row.forEach((cell, cellIndex) => {
                    const cellY = headerY - (rowIndex + 1) * 20;
                    page.drawText(cell, { x: 10 + cellIndex * 120, y: cellY, size: 12, color: rgb(0, 0, 0) });
                });
            });

            // Add signature section
            const signatureY = headerY - (rows.length + 2) * 20;
            page.drawText('________________________', { x: 180, y: signatureY, size: 12, color: rgb(0, 0, 0) });
            page.drawText('Signature', { x: 180, y: signatureY - 10, size: 12, color: rgb(0, 0, 0) });
            page.drawText('________________________', { x: 30, y: signatureY, size: 12, color: rgb(0, 0, 0) });
            page.drawText('Authorized Signature', { x: 30, y: signatureY - 10, size: 12, color: rgb(0, 0, 0) });

            // Serialize the PDFDocument to bytes (a Uint8Array)
            const pdfBytes = await pdfDoc.save();

            // Download the PDF
            const blob = new Blob([pdfBytes], { type: 'application/pdf' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'Job_Order_Report.pdf';
            document.body.appendChild(a);
            a.click();
            a.remove();
        } catch (error) {
            console.error('Error generating report:', error);
        }
    };

    const handleResetFilters = () => {
        setReportType('day');
        setSpecificTicket('');
        setStatus('');
        setStartDate(null);
        setEndDate(null);
        setUserId('');
        setDepartment('');
        setBuilding('');
        setCampus('');
        setNoResults(false);
    };

    return (
        <LocalizationProvider dateAdapter={AdapterLuxon}>
            <div>
                <h1>Create Report</h1>
                <div>
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <FormControl fullWidth>
                            <InputLabel>Report Type</InputLabel>
                            <Select value={reportType} onChange={e => setReportType(e.target.value)}>
                                <MenuItem value="day">Daily</MenuItem>
                                <MenuItem value="week">Weekly</MenuItem>
                                <MenuItem value="month">Monthly</MenuItem>
                            </Select>
                        </FormControl>
                        <FormControl fullWidth>
                            <InputLabel>Specific Ticket</InputLabel>
                            <Select value={specificTicket} onChange={e => setSpecificTicket(e.target.value)}>
                                {jobOrders.map((order) => (
                                    <MenuItem key={order._id} value={order._id}>
                                        {order.ticketNumber}
                                    </MenuItem>
                                ))}
                            </Select>
                        </FormControl>
                        <FormControl fullWidth>
                            <InputLabel>Status</InputLabel>
                            <Select value={status} onChange={e => setStatus(e.target.value)}>
                                <MenuItem value="">All</MenuItem>
                                <MenuItem value="approved">Approved</MenuItem>
                                <MenuItem value="pending">Pending</MenuItem>
                                <MenuItem value="completed">Completed</MenuItem>
                            </Select>
                        </FormControl>
                        <DesktopDatePicker
                            label="Start Date"
                            inputFormat="MM/dd/yyyy"
                            value={startDate}
                            onChange={setStartDate}
                            renderInput={(params) => <TextField {...params} fullWidth />}
                        />
                        <DesktopDatePicker
                            label="End Date"
                            inputFormat="MM/dd/yyyy"
                            value={endDate}
                            onChange={setEndDate}
                            renderInput={(params) => <TextField {...params} fullWidth />}
                        />
                        <TextField label="User ID" value={userId} onChange={e => setUserId(e.target.value)} />
                        <TextField label="Department" value={department} onChange={e => setDepartment(e.target.value)} />
                        <TextField label="Building" value={building} onChange={e => setBuilding(e.target.value)} />
                        <TextField label="Campus" value={campus} onChange={e => setCampus(e.target.value)} />
                    </div>
                    <div className="flex justify-end">
                        <Button variant="contained" color="primary" onClick={handleGenerateReport}>
                            Generate Report
                        </Button>
                        <Button variant="outlined" onClick={handleResetFilters} className="ml-4">
                            Reset Filters
                        </Button>
                    </div>
                    <Snackbar open={noResults} autoHideDuration={3000} onClose={() => setNoResults(false)}>
                        <Alert severity="info">No results found for this report!</Alert>
                    </Snackbar>
                </div>
                <SideNav />
            </div>
        </LocalizationProvider>
    );
};

export default CreateReport;
