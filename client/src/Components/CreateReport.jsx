import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';
import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';
import { TextField, Button, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import jsPDF from 'jspdf';
import 'jspdf-autotable'; // Import the plugin here
import { toast } from 'react-hot-toast'; // Import toast

const CreateReport = () => {
    const [specificTicket, setSpecificTicket] = useState('');
    const [status, setStatus] = useState('');
    const [startDate, setStartDate] = useState(null);
    const [endDate, setEndDate] = useState(null);
    const [department, setDepartment] = useState('');
    const [building, setBuilding] = useState('');
    const [campus, setCampus] = useState('');
    const [jobOrders, setJobOrders] = useState([]);  // State for job orders
    const [userName, setUserName] = useState(''); // State for user's name

    // Fetch user profile to get the user's name
    useEffect(() => {
        const fetchUserProfile = async () => {
            try {
                const response = await axios.get('/api/profile', { withCredentials: true });
                const userData = response.data;
                setUserName(`${userData.firstName} ${userData.lastName}`); // Set user's name
            } catch (error) {
                console.error('Error fetching user profile:', error);
            }
        };
        fetchUserProfile();
    }, []);

    // Fetch job orders dynamically
    useEffect(() => {
        const fetchJobOrders = async () => {
            try {
                const response = await axios.get('/api/jobOrders', { params: { status: 'approved' }, withCredentials: true });
                setJobOrders(response.data.requests);  // Assuming response contains job orders in `requests`
            } catch (error) {
                console.error('Error fetching job orders:', error);
            }
        };

        fetchJobOrders();
    }, []);

    const handleGenerateReport = async () => {
        try {
            const dateRange = startDate && endDate
                ? `${startDate.toISODate()}:${endDate.toISODate()}`
                : '';

            const response = await axios.get('/api/report', {
                params: { reportType, specificTicket, status, dateRange, userId, department, building, campus }
            });
            const requests = response.data.requests;

            if (requests.length === 0) {
                toast('No results found for the specified filters.', {
                    icon: '⚠️',
                    style: {
                        border: '1px solid #FFA500',
                        color: '#FFA500',
                    },
                });
                return;
            }

            const doc = new jsPDF();
            const logo = await import(/* webpackIgnore: true */ '../assets/img/nu_logo.png'); // Update the path to your logo

            // Add logo
            doc.addImage(logo.default, 'PNG', 10, 10, 50, 20); // Adjust the position and size as needed

            // Report Title
            doc.setFontSize(24);
            doc.setFont('Helvetica', 'bold');
            doc.text('Job Order Report', 70, 30);

            // User Information
            doc.setFontSize(12);
            doc.setFont('Helvetica', 'normal');
            doc.text(`Generated by: ${userName || 'N/A'}`, 10, 50); // Use fetched user name
            doc.text(`Generated on: ${new Date().toLocaleString()}`, 10, 60);

            doc.text(`Report Type: ${reportType}`, 10, 70);
            doc.text(`Status: ${status || 'All'}`, 10, 80);
            doc.text(`Date Range: ${dateRange || 'N/A'}`, 10, 90);
            doc.text(`User ID: ${userId || 'N/A'}`, 10, 100);
            doc.text(`Department: ${department || 'N/A'}`, 10, 110);
            doc.text(`Building: ${building || 'N/A'}`, 10, 120);
            doc.text(`Campus: ${campus || 'N/A'}`, 10, 130);

            // Table header
            doc.autoTable({
                startY: 140,
                head: [['ID', 'Name', 'Status', 'Date']],
                body: requests.map(req => [
                    req._id,
                    `${req.firstName} ${req.lastName}`,
                    req.status,
                    new Date(req.createdAt).toLocaleDateString()
                ]),
                theme: 'grid', // You can change the table theme here
            });

            // Add signature section
            const signatureY = doc.autoTable.previous.finalY + 20;
            doc.text('________________________', 180, signatureY, { align: 'right' });
            doc.text('Signature', 180, signatureY + 10, { align: 'right' });

            // Additional placeholders for signatures
            doc.text('________________________', 30, signatureY, { align: 'left' });
            doc.text('Authorized Signature', 30, signatureY + 10, { align: 'left' });

            doc.save('Job_Order_Report.pdf');
        } catch (error) {
            console.error('Error generating report:', error);
            toast.error('Error generating report. Please try again.'); // Show error toast
        }
    };

    const handleResetFilters = () => {
        setSpecificTicket('');
        setStatus('');
        setStartDate(null);
        setEndDate(null);
        setDepartment('');
        setBuilding('');
        setCampus('');
    };

    return (
        <LocalizationProvider dateAdapter={AdapterLuxon}>
            <div className="flex">
                <div className="w-full">
                    <div className="w-[80%] ml-[20%] p-6">
                        <h2 className="text-2xl mb-4">Report</h2>
                        <div className="mb-6">
                            <FormControl fullWidth>
                                <InputLabel>Specific Ticket</InputLabel>
                                <Select
                                    value={specificTicket}
                                    onChange={(e) => setSpecificTicket(e.target.value)}
                                >
                                    {jobOrders.map(order => (
                                        <MenuItem key={order._id} value={order._id}>
                                            {`${order.firstName} ${order.lastName} - ${order.jobDesc}`} {/* Customize as needed */}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </div>
                        <div className="mb-6">
                            <label htmlFor="status" className="block text-gray-700 font-semibold mb-2">Status:</label>
                            <select
                                id="status"
                                value={status}
                                onChange={(e) => setStatus(e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded"
                            >
                                <option value="">All</option>
                                <option value="completed">Completed</option>
                                <option value="approved">Approved</option>
                                <option value="rejected">Rejected</option>
                                <option value="pending">Pending</option>
                            </select>
                        </div>
                        <div className="mb-6">
                            <label htmlFor="dateRange" className="block text-gray-700 font-semibold mb-2">Date Range:</label>
                            <div className="flex space-x-4">
                                <DesktopDatePicker
                                    label="Start Date"
                                    inputFormat="yyyy-MM-dd"
                                    value={startDate}
                                    onChange={(newDate) => setStartDate(newDate)}
                                    slots={{ textField: (params) => <TextField {...params} fullWidth /> }}
                                />
                                <DesktopDatePicker
                                    label="End Date"
                                    inputFormat="yyyy-MM-dd"
                                    value={endDate}
                                    onChange={(newDate) => setEndDate(newDate)}
                                    slots={{ textField: (params) => <TextField {...params} fullWidth /> }}
                                />
                            </div>
                        </div>

                        <div className="mb-6">
                            <label htmlFor="department" className="block text-gray-700 font-semibold mb-2">Department:</label>
                            <input
                                type="text"
                                id="department"
                                value={department}
                                onChange={(e) => setDepartment(e.target.value)}
                                placeholder="Enter Department"
                                className="w-full p-2 border border-gray-300 rounded"
                            />
                        </div>
                        <div className="mb-6">
                            <label htmlFor="building" className="block text-gray-700 font-semibold mb-2">Building:</label>
                            <input
                                type="text"
                                id="building"
                                value={building}
                                onChange={(e) => setBuilding(e.target.value)}
                                placeholder="Enter Building"
                                className="w-full p-2 border border-gray-300 rounded"
                            />
                        </div>
                        <div className="mb-6">
                            <label htmlFor="campus" className="block text-gray-700 font-semibold mb-2">Campus:</label>
                            <input
                                type="text"
                                id="campus"
                                value={campus}
                                onChange={(e) => setCampus(e.target.value)}
                                placeholder="Enter Campus"
                                className="w-full p-2 border border-gray-300 rounded"
                            />
                        </div>
                        <div className="flex justify-between">
                            <Button variant="contained" color="primary" onClick={handleGenerateReport}>
                                Generate Report
                            </Button>
                            <Button variant="outlined" onClick={handleResetFilters}>
                                Reset
                            </Button>
                        </div>
                    </div>
                </div>
            </div>
        </LocalizationProvider>
    );
};

export default CreateReport;

